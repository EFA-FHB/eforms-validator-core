plugins {
    id 'io.quarkus'
    id 'jacoco'
    id 'org.sonarqube'
    id 'maven-publish'
    id "com.diffplug.spotless" version "6.19.0"
}

dependencies {
    // Quarkus
    implementation(platform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}"))
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-hibernate-validator'

    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-resteasy-multipart'

    // Utils
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-lang3:3.0'
    implementation 'org.projectlombok:lombok:1.18.22'

    implementation 'com.jcabi:jcabi-xml:0.21.3'
    implementation files('libs/kosit-validator-patched.jar')
    implementation 'com.helger.schematron:ph-schematron-pure:6.3.3'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'

    testImplementation 'app.getxray:xray-junit-extensions:0.6.1'
    testImplementation 'io.quarkus:quarkus-junit5'
}

test {
    minHeapSize = "1024m" // initial heap size
    maxHeapSize = "7168m" // maximum heap size
}

sonarqube {
    String sonarHostUrl = System.getenv("SONAR_HOST_URL") ?: property("sonarHostUrl")
    String sonarLogin = System.getenv("SONAR_TOKEN") ?: property("sonarLogin")
    String sonarPassword = System.getenv("SONAR_TOKEN") ? "" : property("sonarPassword")
    properties {
        property 'sonar.host.url', sonarHostUrl
        property 'sonar.login', sonarLogin
        property 'sonar.password', sonarPassword
        property "sonar.projectKey", "EFA-FHB_gdk-eforms-validator"
        property "sonar.projectName", "gdk-eforms-validator"
        property "sonar.organization", "efa-fhb"
        property 'sonar.inclusions', "**/resource/**, **/efafhb/gdk/**"
    }
}

test.finalizedBy jacocoTestReport

jacocoTestReport {

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }

    getExecutionData().setFrom(fileTree(buildDir).include("jacoco/*.exec"))

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/build/generated/*"])
        }))
    }
    dependsOn processResources, quarkusGenerateCode, compileJava
}

tasks.named('sonarqube').configure {
    dependsOn jacocoTestReport
}

task xrayTests(type: Test) {
    useJUnitPlatform {
        includeTags "xray-test"
    }
}


spotless {
    ratchetFrom 'origin/main'
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}