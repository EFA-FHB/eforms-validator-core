# This workflow builds the application.
#
# The workflow consists of several jobs which
# - run automated tests
# - report test results to JIRA (if build runs on main branch)
# - create coverage report
# - run a sonar scan and pass results to SonarCloud
# - create container images
# - push container images (if requested)
# - trigger deployment (if build runs on main branch)
name: "🏗️ CI"

on:
  push:
    branches:
      - main
      - development
      - '!feature/**'
    paths:
      - '**'
      - '!gradle.properties'
      - '!.github/**/*.yaml'
    tags:
      - '*'
  pull_request:
    branches:
      - main
      - development
      - 'feature/**'

concurrency:
  group: ci-${{ github.ref_name }}
  cancel-in-progress: true

env:
  GIT_SHA_REF: ${{ github.event.pull_request.head.sha }}
  AZURE_DOCKER_REGISTRY: efafhb.azurecr.io
  XRAY_PROJECT_KEY: "D603345"
  XRAY_TESTPLAN_KEY: "D603345-914"

  WORKLOADS_APP_EXT_CONTEXT: app-ext
  WORKLOADS_APP_EXT_IMAGE: ext-eforms-validator-app
  WORKLOADS_APP_EXT_DOCKERFILEPATH: app-ext/src/main/docker/Dockerfile.jvm

  WORKLOADS_APP_INT_CONTEXT: app-int
  WORKLOADS_APP_INT_IMAGE: int-eforms-validator-app
  WORKLOADS_APP_INT_DOCKERFILEPATH: app-int/src/main/docker/Dockerfile.jvm

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        module: [app-ext, app-int]

    name: "🛠️ build_${{ matrix.module }}"

    steps:
      - uses: actions/checkout@v3
        name: Checkout project
        with:
          fetch-depth: 0 #spotless fix

      - name: debug
        shell: bash
        env:
          JSON: ${{ toJSON(github) }}
        run: echo $JSON

      - name: install_shared_actions
        uses: ./.github/actions/install_shared_actions
        with:
          token: ${{secrets.EFA_CICD_REPO_ACCESS_TOKEN}}
          tag: v2.4.0

      - name: ensure branch strategy compliance
        id: check_branch_strategy
        uses: ./.github/actions/shared/check_branch_name

      - name: Project setup
        uses: ./.github/actions/shared/setup_jdk_17

      - name: Build Module ${{matrix.module}} without tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ matrix.module }}:build -x test

      - name: Scan dependencies for vulnerabilities
        if: ${{ vars.TRIVY_ROOTFS_SCAN_ENABLED == 'true' }}
        uses: docker://docker.io/aquasec/trivy
        with:
          args: rootfs --skip-dirs=.sonar --ignore-unfixed --severity "HIGH,CRITICAL" --security-checks "vuln" .

  test:
    needs: [build]
    runs-on: ubuntu-latest-8-cores
    strategy:
      max-parallel: 3
      matrix:
        module: [core, app-ext, app-int]

    name: "📝 run tests ${{ matrix.module }}"

    steps:
      - uses: actions/checkout@v3
        name: Checkout project

      - name: install_shared_actions
        uses: ./.github/actions/install_shared_actions
        with:
          token: ${{secrets.EFA_CICD_REPO_ACCESS_TOKEN}}
          tag: v2.4.0

      - name: Project setup
        uses: ./.github/actions/shared/setup_jdk_17

      - name: Run unit-tests
        id: run_tests
        uses: gradle/gradle-build-action@v2.3.3
        with:
          arguments: :${{matrix.module}}:test --info -Pgpr.key=${{ inputs.xray-ghp-token }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3.6.2
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          annotate_only: true

      - name: check sonarcloud.io
        id: sonarcloud_probe
        shell: bash +e {0}
        run: |
          curl -kv https://sonarcloud.io
          echo "exit=$?" >> $GITHUB_OUTPUT
          exit 0
          
      - name: Run Sonar scan
        if: ${{  github.actor != 'dependabot[bot]' && vars.SONAR_SCAN_ENABLED == 'true' && steps.sonarcloud_probe.outputs.exit == '0' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :${{matrix.module}}:sonarqube --info


  docker_build_and_push:
    needs: [test]

    runs-on: ubuntu-latest

    strategy:
      max-parallel: 2
      matrix:
        module: [ app-ext, app-int ]

    name: "📦 docker_build_${{ matrix.module }}"

    steps:

      - uses: actions/checkout@v3
        name: Checkout project
        with:
          fetch-depth: 0 #spotless fix

      - name: debug
        shell: bash
        env:
          JSON: ${{ toJSON(github) }}
        run: echo $JSON

      - name: install_shared_actions
        uses: ./.github/actions/install_shared_actions
        with:
          token: ${{secrets.EFA_CICD_REPO_ACCESS_TOKEN}}
          tag: v2.4.0

      - name: Project setup
        uses: ./.github/actions/shared/setup_jdk_17

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: get openapi attributes
        id: openapi_attributes
        shell: bash
        run: |
          openapiInfoVersion=$(grep -E "openapiInfoVersion" ${{ matrix.module }}/gradle.properties | cut -d "=" -f2)
          echo "openapiInfoVersion=${openapiInfoVersion}" >> $GITHUB_OUTPUT

      - name: Build Module ${{matrix.module}} without tests
        uses: gradle/gradle-build-action@v2
        env:
          OPENAPI_INFO_VERSION: ${{steps.openapi_attributes.outputs.openapiInfoVersion}}
        with:
          arguments: ${{ matrix.module }}:build -x test

      - name: Login to
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.AZURE_DOCKER_REGISTRY }}
          username: ${{ secrets.AZURE_EFA_FHB_ACR_USERNAME }}
          password: ${{ secrets.AZURE_EFA_FHB_ACR_PASSWORD }}

      - name: workload context ${{ matrix.module }}
        id: workload
        shell: bash
        run: |
          if [[ "${{ matrix.module }}" == "app-ext" ]]; then
           echo "image=${{env.WORKLOADS_APP_EXT_IMAGE}}" >> $GITHUB_OUTPUT
           echo "context=${{env.WORKLOADS_APP_EXT_CONTEXT}}" >> $GITHUB_OUTPUT
           echo "dockerfilePath=${{env.WORKLOADS_APP_EXT_DOCKERFILEPATH}}" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ matrix.module }}" == "app-int" ]]; then
           echo "image=${{env.WORKLOADS_APP_INT_IMAGE}}" >> $GITHUB_OUTPUT
           echo "context=${{env.WORKLOADS_APP_INT_CONTEXT}}" >> $GITHUB_OUTPUT
           echo "dockerfilePath=${{env.WORKLOADS_APP_INT_DOCKERFILEPATH}}" >> $GITHUB_OUTPUT
          fi

      - name: create image tags
        id: create_image_tags
        uses: ./.github/actions/create_image_tags
        with:
          release_module_name: ${{ matrix.module }}

      - name: docker build + push image ${{ matrix.module }}
        id: build_push_image
        uses: ./.github/actions/shared/docker_build_push_image
        env:
          image: ${{steps.workload.outputs.image}}
          context: ${{steps.workload.outputs.context}}
          dockerfilePath: ${{steps.workload.outputs.dockerfilePath}}
          imageTags: ${{steps.create_image_tags.outputs.tags}}
        with:
          image: ${{env.AZURE_DOCKER_REGISTRY}}/${{env.image}}
          imageTags: ${{env.imageTags}}
          context: ${{ env.context }}
          dockerfilePath: ${{ env.dockerfilePath }}
          scanImage: ${{ vars.TRIVY_IMAGE_SCAN_ENABLED == 'true' }}
